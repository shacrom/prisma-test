generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(CUSTOMER) // CUSTOMER or ADMIN
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  Address   Address[]
}

model Dish {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categories  DishCategory[]
  menuItems   MenuItem[]
  OrderItem   OrderItem[]
}

model DishCategory {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  dishes      Dish[]
}

model Menu {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  menuItems   MenuItem[]
}

model MenuItem {
  id       Int  @id @default(autoincrement())
  menu     Menu @relation(fields: [menuId], references: [id])
  menuId   Int
  dish     Dish @relation(fields: [dishId], references: [id])
  dishId   Int
  quantity Int  @default(1) // Number of times the dish appears on the menu
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  orderItems  OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  Payment     Payment[]
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  order    Order @relation(fields: [orderId], references: [id])
  orderId  Int
  dish     Dish  @relation(fields: [dishId], references: [id])
  dishId   Int
  quantity Int   @default(1)
  price    Float // Individual price of the dish at the time of the order
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false) // Indicates if it is the primary address
  createdAt  DateTime @default(now())
}

model Payment {
  id        Int           @id @default(autoincrement())
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   Int
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserRole {
  ADMIN
  CUSTOMER
}